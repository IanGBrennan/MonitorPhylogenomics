RICHras@data@values[is.na(RICHras@data@values)] <- 0
pal.length <- abs(min(RICHras@data@values) - max(RICHras@data@values)) * 10
myBreaks <- c(seq(min(RICHras@data@values), 0, length.out=ceiling(pal.length/2) + 1),
seq(max(RICHras@data@values)/pal.length, max(RICHras@data@values),
length.out=floor(pal.length/2)))
ggmap(graymap) +
geom_polygon(data = RICHpoly,
aes(x = long, y = lat,
group = group,
fill = filled.RICH),
size = 0, alpha = 1)  +
scale_fill_gradientn("Richness",
colors = rev(colorRampPalette(
brewer.pal(9, "RdYlBu"))(max.colors))) +
theme_classic()
FDpoly <- rasterToPolygons(FDras);
#FDpoly <- rasterToPolygons(FDisras)
max.colors <- length(unique(FDpoly$layer));
filled.FD <- rep(FDpoly$layer, each=5)
# 'each' is important, otherwise the polygon values get screwed up
FDras@data@values[is.na(FDras@data@values)] <- 0
pal.length <- abs(min(FDras@data@values) - max(FDras@data@values)) * 10
myBreaks <- c(seq(min(FDras@data@values), 0, length.out=ceiling(pal.length/2) + 1),
seq(max(FDras@data@values)/pal.length, max(FDras@data@values),
length.out=floor(pal.length/2)))
#FDras@data@values[which(FDras@data@values == 0)] <- "NA"
ggmap(graymap) +
geom_polygon(data = FDpoly,
aes(x = long,
y = lat,
group = group,
fill = filled.FD),
size = 0, alpha = 1)  +
scale_fill_gradientn("FD",
values=scales::rescale(c(min(res.table$RaoQ),
mean(res.table$RaoQ)/2,
mean(res.table$RaoQ),
mean(res.table$RaoQ)*2,
max(res.table$RaoQ))),
colors = rev(colorRampPalette(
brewer.pal(9, "RdYlBu"))(max.colors))) +
theme_classic()
cm <- gridded.dist
richness.raster <- rr; richness.raster@data@values[] <- 0
fd.raster <- rr; fd.raster@data@values[] <- 0
pre.rr <- left_join(rr.cells, cm, by=c("latitude", "longitude")); pre.rr[is.na(pre.rr)] <- 0
pre.fd <- left_join(rr.cells, res.table, by=c("latitude", "longitude"))
pre.fd <- left_join(pre.fd, cm, by=c("latitude", "longitude")); pre.fd[is.na(pre.fd)] <- 0
richness.raster@data@values <- pre.rr$richness
fd.raster@data@values <- pre.fd$RaoQ
#fd.raster@data@values <- pre.fd$FDis
plot(richness.raster)
plot(fd.raster)
cells.rich <- which(richness.raster@data@values > 1)
cells.fd <- which(fd.raster@data@values > 0)
input.rr <- pre.rr[,4:ncol(pre.rr)];
input.rr <- input.rr[which(rowSums(input.rr) > 1),]
input.fd <- pre.fd[which(pre.fd$RaoQ >= 0), 6:ncol(pre.fd)]
#input.fd <- pre.fd[which(pre.fd$FDis > 0), 6:ncol(pre.fd)]
paste(nrow(pre.rr), "total sites")
paste(nrow(input.rr), "sites have >1 species present")
paste(nrow(input.fd), "sites have >0 functional diversity")
input.rr <- pre.rr[,4:ncol(pre.rr)];
input.rr <- input.rr[which(rowSums(input.rr) > 1),]
input.fd <- pre.fd[which(pre.fd$RaoQ > 0), 6:ncol(pre.fd)]
#input.fd <- pre.fd[which(pre.fd$FDis > 0), 6:ncol(pre.fd)]
paste(nrow(pre.rr), "total sites")
paste(nrow(input.rr), "sites have >1 species present")
paste(nrow(input.fd), "sites have >0 functional diversity")
coords.rich <- xyFromCell(richness.raster, cells.rich)
coords.fd <- xyFromCell(fd.raster, cells.fd)
# for richness
gc.dist.rich <- rdist.earth(coords.rich);
rownames(gc.dist.rich) <- cells.rich;
colnames(gc.dist.rich) <- cells.rich;
diag(gc.dist.rich) <- 0
# for functional diversity
gc.dist.fd <- rdist.earth(coords.fd);
rownames(gc.dist.fd) <- cells.fd;
colnames(gc.dist.fd) <- cells.fd;
diag(gc.dist.fd) <- 0
source("~/Documents/GitHub/MonitorPhylogenomics/DispersalNullModel.R")
library(parallel)
nullFD <- function(n.model, n.iter,
method=c("randomizeMatrix", "DNM"),
cores, trait.data, measure=c("RaoQ", "FDis", "Richness"),
great.circle){
beginning <- Sys.time()
Rao.table <- NULL
if(method=="randomizeMatrix"){
swap <- mclapply(1:n.iter, function(x) {
randomizeMatrix(input.fd,
null.model=n.model,
iterations=10)},
mc.cores=cores)
swap.res <- mclapply(1:length(swap), function(x) {
dbFD(trait.frame, swap[[x]])}, mc.cores=8)
for(j in 1:length(swap.res)){
Rao.table <- cbind(Rao.table, swap.res[[j]]$RaoQ)
}
}
else if(method=="DNM"){
swap <- mclapply(1:n.iter, function(x) {
DNM(input.fd, tree=NA,
great.circle, abundance.matters=F,
abundance.assigned="directly")}, mc.cores=cores)
swap <- Filter(function(x) length(x)>1, swap)
# Get FD
if (measure=="RaoQ"){
swap.res <- mclapply(1:length(swap), function(x) {
dbFD(trait.data, swap[[x]])}, mc.cores=8)
for(j in 1:length(swap.res)){
Rao.table <- cbind(Rao.table, swap.res[[j]]$RaoQ)
}
}
else if (measure=="FDis"){
swap.res <- mclapply(1:length(swap), function(x) {
dbFD(trait.data, swap[[x]])}, mc.cores=8)
for(j in 1:length(swap.res)){
Rao.table <- cbind(Rao.table, swap.res[[j]]$FDis)
}
}
# or Get RICHNESS
else if (measure=="Richness"){
swap.res <- mclapply(1:length(swap), function(x) {
rowSums(swap[[x]])}, mc.cores=8)
for (j in 1:length(swap.res)){
Rao.table <- cbind(Rao.table, swap.res[[j]])
}
}
print(paste("you attempted", n.iter,
"iterations, and you got",
length(swap), "simulations"))
}
end <- Sys.time()
duration <- format(end-beginning)
print(paste("Computation time to fit", n.iter,
method, "null models:", duration))
Rao.table <- as.data.frame(Rao.table);
Raw.table <- Rao.table
Rao.table <- cbind(Rao.table,
sim.mean=rowMeans(Rao.table))
Rao.table <- cbind(Rao.table,
sim.sd=apply(Raw.table, 1, sd))
#Rao.table <- cbind(Rao.table, emp.val=) # I could add in the empirical values (FD)
#Rao.table <- cbind(Rao.table, ses=apply(Rao.table, 1, (Rao.table[,"mean"]))) # then I could calculate the SES straight away
return(Rao.table)
}
RQ <- nullFD(n.model=NULL,
n.iter=2,
method="DNM",
cores=2,
trait.data=log(marsupial.frame),
measure="RaoQ",
great.circle = gc.dist.fd)
nrow(RQ)
head(RQ)
warnings()
RQ <- nullFD(n.model=NULL,
n.iter=50,
method="DNM",
cores=6,
trait.data=log(marsupial.frame),
measure="RaoQ",
great.circle = gc.dist.fd)
#RQ <- cbind(RQ, emp.val=res.table$RaoQ)
RQ <- cbind(RQ, emp.val=res.table$FDis)
ses.vec <- NULL
for(k in 1:nrow(RQ)){
curr <- RQ[k,]
ses <- (curr$emp.val - curr$sim.mean) / curr$sim.sd
ses.vec <- append(ses.vec, ses)
}
# bind it to the simulation dataframe
RQ <- cbind(RQ, ses=ses.vec)
ses.table <- cbind.data.frame(latitude=gridded.dist$latitude, longitude=gridded.dist$longitude, SES=RQ$ses)
combo.SES <- left_join(rr.cells,
ses.table,
by=c("latitude", "longitude"))
SESras <- rr;
SESras@data@values[] <- 0
SESras@data@values <- combo.SES$SES
#values(SESras) <- combo.SES$SES
plot(SESras)
saveRDS(RQ, file="~/Documents/GitHub/MonitorPhylogenomics/SimulatedMarsupial_RaoQ_logData.RDS")
saveRDS(SESras, file="~/Documents/GitHub/MonitorPhylogenomics/SimulatedMarsupial_RaoQ_logData_SES_raster.RDS")
densityplot(RQ$ses)
densityplot(RQ$sim.mean)
densityplot(RQ$emp.val)
SESpoly <- rasterToPolygons(SESras);
max.colors <- length(unique(SESpoly$layer));
filled.SES <- rep(SESpoly$layer, each=5)
ggmap(graymap) +
geom_polygon(data = SESpoly,
aes(x = long, y = lat, group = group,
fill = filled.SES), size = 0, alpha = 1)  +
scale_fill_gradientn("SES", values=scales::rescale(c(min(ses.table$SES),
#min(ses.table$SES)/2,
-0.8,
0,
#max(ses.table$SES)/2,
0.8,
max(ses.table$SES))),
colors = rev(brewer.pal(5, "RdYlBu"))) +
theme_classic()
confidence_interval <- function(vector, interval) {
# Standard deviation of sample
vec_sd <- sd(vector)
# Sample size
n <- length(vector)
# Mean of sample
vec_mean <- mean(vector)
# Error according to t distribution
error <- qt((interval + 1)/2, df = n - 1) * vec_sd / sqrt(n)
# Confidence interval as a vector
result <- c("lower" = vec_mean - error, "upper" = vec_mean + error,
"error" = error, "mean" = vec_mean, "sd" = vec_sd, "N" = n)
return(result)
}
CIall <- confidence_interval(ses.table$SES, 0.95); CIall
CIall["richness"] <- 1
siteRICH <- left_join(ses.table,
gridded.dist[,1:3],
by=c("longitude", "latitude"))
CIses <- NULL
for (i in min(siteRICH$richness):max(siteRICH$richness)){
curr.rich <- filter(siteRICH, richness == i)
CIses <- rbind(CIses, confidence_interval(curr.rich$SES, 0.95))
}
CIses <- data.frame(CIses)
CIses$richness <- 2:11
max(CIses$N)
max(siteRICH$richness)
CIses <- NULL
for (i in min(siteRICH$richness):max(siteRICH$richness)){
curr.rich <- filter(siteRICH, richness == i)
CIses <- rbind(CIses, confidence_interval(curr.rich$SES, 0.95))
}
CIses <- data.frame(CIses)
CIses$richness <- 2:14
plot(data=CIses, mean ~ richness)
CIses <- rbind(CIses, CIall); CIses
library(RColorBrewer)
ggplot(CIses, aes(x=richness, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge(),
fill = colorRampPalette(brewer.pal(9, "RdYlBu"))(11)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9)) +
theme_bw()
library(RColorBrewer)
ggplot(CIses, aes(x=richness, y=mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge(),
fill = colorRampPalette(brewer.pal(9, "RdYlBu"))(14)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2,
position=position_dodge(.9)) +
theme_bw()
CIses
# Install/Load the required "outliers" R package
install.packages("outliers")
# Source the apparent function
source("/Users/Ian/Google.Drive/R.Analyses/apparent/apparent.R")
# Load the input file
InputFile <- read.table(file="apparent_TestData.txt",sep="\t",h=F)
# Load the input file
InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
head(InputFile)
InputFile[1:5,1:5]
nrow(InputFile)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
InputFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
InputFile[1:5,1:5]
ncol(InputFile)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=2500, self=TRUE, plot=TRUE, Dyad=TRUE)
unique(InputFile$Key)
InputFile$Key
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
InputFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=2500, self=FALSE, plot=TRUE, Dyad=TRUE)
InputFile$Genotype
InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
InputFile$Genotype
InputFile[,1]
InputFile[1:5,1:5]
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=2500, self=FALSE, plot=TRUE, Dyad=TRUE)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=300, self=FALSE, plot=TRUE, Dyad=TRUE)
# Install/Load the required "outliers" R package
# install.packages("outliers")
library(outliers)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=300, self=FALSE, plot=TRUE, Dyad=TRUE)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=300, self=FALSE, plot=TRUE, Dyad=FALSE)
# Check the Triad analysis output
apparentOUT$Triad_all
apparentOUT$Triad_sig
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
InputFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
ncol(InputFile)
InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
ncol(InputFile)
InputFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=300, self=FALSE, plot=TRUE, Dyad=FALSE)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
nrow(InputFile)
nrow(FrogFile)
# Run apparent
apparentOUT <- apparent(InputFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
apparentOUT$Triad_sig
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
class(InputFile)
class(FrogFile)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.csv", header=T)
FrogFile$Genotype
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test2.csv", header=F)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=T)
FrogFile[1:5, 1:5]
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=T)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=10, self=FALSE, plot=TRUE, Dyad=FALSE)
InputFIle[1:5,1:5]
InputFile[1:5,1:5]
FrogFile[1:5,1:5]
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=F)
FrogFile[1:5,1:5]
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
nrow(FrogFile)
FrogFile[57:62,1:5]
InputFile[1:5,1:5]
View(FrogFile)
ncol(InputFile)
InputFile=FrogFile
MaxIdent=0.10
alpha=0.01
nloci=100
self=FALSE
plot=TRUE
Dyad=TRUE
GK <- cbind(as.data.frame(InputFile[,1]),as.data.frame(InputFile[,2]))
GK
colnames(GK) <- c("genos","key")
GK
Data <- t(as.data.frame(InputFile[,3:ncol(InputFile)]))
Data
ConvertedData <- data.frame (matrix (ncol = ncol(Data), nrow = 0))
ConvertedData
for (i in 1:nrow(Data)) {
alleles <- setdiff(strsplit(paste(Data[i,],collapse=""),"")[[1]],c("/","-"))
pri <- paste(alleles[1],"/",alleles[1],sep="")
het1 <- paste(alleles[1],"/",alleles[2],sep="")
het2 <- paste(alleles[2],"/",alleles[1],sep="")
sec <- paste(alleles[2],"/",alleles[2],sep="")
Data[i,][Data[i,] == pri] <- 0
Data[i,][Data[i,] == het1 | Data[i,] == het2] <- 0.5
Data[i,][Data[i,] == sec] <- 1
Data[i,][Data[i,] == "-/-"] <- NA
line <- as.numeric(as.vector(Data[i,]))
ConvertedData <- rbind(ConvertedData,line)
}
colnames(ConvertedData) <- as.vector(t(GK$genos))
ConvertedData
Mothers <- vector(mode="numeric",length=0)
MothersNames <- list()
Fathers <- vector(mode="numeric",length=0)
FathersNames <- list()
Offs <- vector(mode="numeric",length=0)
OffsNames <- list()
OffsNames
Offs
Mothers
for (i in 1:ncol(ConvertedData)){
if (GK$key[i] == "Mo") {
Mothers[i] <- as.data.frame(ConvertedData[,i])
MothersNames <- append(MothersNames,as.name(as.matrix(GK[i,1])))
next
} else if (GK$key[i] == "Fa") {
Fathers[i] <- as.data.frame(ConvertedData[,i])
FathersNames <- append(FathersNames,as.name(as.matrix(GK[i,1])))
next
} else if (GK$key[i] == "Off") {
Offs[i] <- as.data.frame(ConvertedData[,i])
OffsNames <- append(OffsNames,as.name(as.matrix(GK[i,1])))
next
} else if (GK$key[i] == "Pa") {
Mothers[i] <- as.data.frame(ConvertedData[,i])
MothersNames <- append(MothersNames,as.name(as.matrix(GK[i,1])))
Fathers[i] <- as.data.frame(ConvertedData[,i])
FathersNames <- append(FathersNames,as.name(as.matrix(GK[i,1])))
next
} else if (GK$key[i] == "All") {
Mothers[i] <- as.data.frame(ConvertedData[,i])
MothersNames <- append(MothersNames,as.name(as.matrix(GK[i,1])))
Fathers[i] <- as.data.frame(ConvertedData[,i])
FathersNames <- append(FathersNames,as.name(as.matrix(GK[i,1])))
Offs[i] <- as.data.frame(ConvertedData[,i])
OffsNames <- append(OffsNames,as.name(as.matrix(GK[i,1])))
next
} else {
stop("Please, check the format of the key column (Column 2) in your input file. Acceptable keys for each genotype are Mo, Fa, Off, Pa and All.")
}
}
Mothers
Mothers <- as.data.frame(Mothers[!sapply(Mothers,is.null)])
colnames(Mothers) <- MothersNames
Fathers <- as.data.frame(Fathers[!sapply(Fathers,is.null)])
colnames(Fathers) <- FathersNames
Offs <- as.data.frame(Offs[!sapply(Offs,is.null)])
colnames(Offs) <- OffsNames
Mothers
Fathers
Offs
WorkMatrix <- as.data.frame(cbind(Mothers,Fathers,Offs))
MoN <- ncol(Mothers)
MoS <- 1
WorkMatrix <- as.data.frame(cbind(Mothers,Fathers,Offs))
is.na(Mothers)
is.null(Mothers)
Mothers
length(Mothers)
length(Fathers)
length(Offs)
is.na(Fathers)
is.empty(Mothers)
is.empty(Fathers)
is.null(Mothers[1])
is.na(Mothers)
Mothers
nrows(Mothers)
nrow(Mothers)
nrow(Fathers)
nrow(Offs)
ncol(Mothers)
ncol(Fathers)
ncol(Offs)
MoN <- ncol(Mothers)
MoS <- 1
MoE <- ncol(Mothers)
FaN <- ncol(Fathers)
FaS <- MoE + 1
FaE <- FaS + ncol(Fathers) - 1
OfN <- ncol(Offs)
OfS <- FaE + 1
OfE <- OfS + ncol(Offs) - 1
MoN
MoS
MoE <- ncol(Mothers)
MoE
FaN
FaS
FaE
OfN
OfS
OfE
MoS:MoE
MoE
FaN
FaE
OfN
OfS
OfE
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
#FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=F)
FrogFile <- read.csv("/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test2.csv", header=F)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
unique(FrogFile$V1)
unique(FrogFile$V2)
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=F)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
FrogFile$V2
# Load the input file
#InputFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/apparent_TestData.txt",sep="\t",h=F)
FrogFile <- read.table(file="/Users/Ian/Google.Drive/R.Analyses/apparent/Frog_apparent_Test.txt",sep="\t",h=T)
# Run apparent
apparentOUT <- apparent(FrogFile, MaxIdent=0.10, alpha=0.01, nloci=100, self=FALSE, plot=TRUE, Dyad=FALSE)
wordcountaddin:::text_stats()
